/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "../zmk-nodefree-config/helper.h"


#define BASE 0
#define CYRMAIN 1
#define CYRXTRA 2
#define NUM 3
#define NAVI 4
#define SYMBOL 5
#define FUNCTION 6
#define TYPOGRAPHY 7
#define BLUETOOTH 8

ZMK_BEHAVIOR(hrm, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    bindings = <&kp>, <&kp>;
)

ZMK_BEHAVIOR(msc, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    bindings = <&mo_symb_cyr>, <&kp>;
)

// ZMK_BEHAVIOR(mnc, hold_tap,
//     flavor = "balanced";
//     tapping-term-ms = <280>;
//     quick-tap-ms = <125>;
//     bindings = <&mo_num_cyr>, <&kp>;
// )

// ZMK_BEHAVIOR(mfc, hold_tap,
//     flavor = "balanced";
//     tapping-term-ms = <280>;
//     quick-tap-ms = <125>;
//     bindings = <&mo_func_cyr>, <&kp>;
// )

// ZMK_BEHAVIOR(mtc, hold_tap,
//     flavor = "balanced";
//     tapping-term-ms = <280>;
//     quick-tap-ms = <125>;
//     bindings = <&mo_typo_cyr>, <&kp>;
// )

ZMK_BEHAVIOR(altr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    bindings = <&alt_cyr>, <&kp>;
)

ZMK_BEHAVIOR(ctlr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    bindings = <&ctl_cyr>, <&kp>;
)

ZMK_BEHAVIOR(guir, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    bindings = <&gui_cyr>, <&kp>;
)

ZMK_BEHAVIOR(mehr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    bindings = <&meh_cyr>, <&kp>;
)

ZMK_BEHAVIOR(hyperr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    bindings = <&hyper_cyr>, <&kp>;
)

/ {

    macros {
        switch_eng: switch_eng {
            label = "Switch_Eng";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings 
                = <&to 0>,
                <&macro_tap &kp LA(LC(LG(LS(N8))))>;
        };
        switch_cyr: switch_cyr {
            label = "Switch_Cyr";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings 
                = <&to 1>,
                <&macro_tap &kp LA(LC(LG(LS(N9))))>;
        };

        mo_symb_cyr: mo_symb_cyr {
            label = "Mo_Symb_Cyr";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings 
                = <&to 5>,
                <&macro_tap &kp LA(LC(LG(LS(N8))))>,
                <&macro_pause_for_release>,
                <&to 1>,
                <&macro_tap &kp LA(LC(LG(LS(N9))))>;
        };
        
        mo_num_cyr: mo_num_cyr {
            label = "Mo_Num_Cyr";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings 
                = <&to 3>,
                <&macro_tap &kp LA(LC(LG(LS(N8))))>,
                <&macro_pause_for_release>,
                <&to 1>,
                <&macro_tap &kp LA(LC(LG(LS(N9))))>;
        };

        mo_func_cyr: mo_func_cyr {
            label = "Mo_Func_Cyr";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings 
                = <&to 6>,
                <&macro_tap &kp LA(LC(LG(LS(N8))))>,
                <&macro_pause_for_release>,
                <&to 1>,
                <&macro_tap &kp LA(LC(LG(LS(N9))))>;
        };

        mo_typo_cyr: mo_typo_cyr {
            label = "Mo_Typo_Cyr";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings 
                = <&to 7>,
                <&macro_tap &kp LA(LC(LG(LS(N8))))>,
                <&macro_pause_for_release>,
                <&to 1>,
                <&macro_tap &kp LA(LC(LG(LS(N9))))>;
        };

        alt_cyr: alt_cyr {
            label = "Alt_Cyr";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings 
                = <&to 0>,
                <&macro_press &kp LALT>,
                <&macro_pause_for_release>,
                <&to 1>,
                <&macro_release &kp LALT>;
        };

        gui_cyr: gui_cyr {
            label = "Gui_Cyr";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings 
                = <&to 0>,
                <&macro_press &kp LGUI>,
                <&macro_pause_for_release>,
                <&to 1>,
                <&macro_release &kp LGUI>;
        };

        ctl_cyr: ctl_cyr {
            label = "Ctl_Cyr";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings 
                = <&to 0>,
                <&macro_press &kp LCTRL>,
                <&macro_pause_for_release>,
                <&to 1>,
                <&macro_release &kp LCTRL>;
        };

        meh_cyr: meh_cyr {
            label = "Meh_Cyr";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings 
                = <&to 0>,
                <&macro_press &kp LA(LC(LEFT_SHIFT))>,
                <&macro_pause_for_release>,
                <&to 1>,
                <&macro_release &kp LA(LC(LEFT_SHIFT))>;
        };

        hyper_cyr: hyper_cyr {
            label = "Hyper_Cyr";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings 
                = <&to 0>,
                <&macro_press &kp LA(LC(LG(LEFT_SHIFT)))>,
                <&macro_pause_for_release>,
                <&to 1>,
                <&macro_release &kp LA(LC(LG(LEFT_SHIFT)))>;
        };

        mod_cyr:mod_cyr {
            label = "Mod_Cyr";
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            wait-ms = <10>;
            bindings
                = <&to 0>,
                <&macro_param_1to1>,
                <&macro_press &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&to 1>,
                <&macro_release &kp MACRO_PLACEHOLDER>;
        };

        punct_cyr: punct_cyr {
            label = "Punct_Cyr";
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            wait-ms = <10>;
            bindings
                = <&macro_tap &kp LA(LC(LG(LS(N8))))>,
                <&macro_param_1to1>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_tap &kp LA(LC(LG(LS(N9))))>;
        };

        };

    combos {
        compatible = "zmk,combos";

        combo_switch_eng {
            key-positions = <44 45>;
            bindings = <&switch_eng>;
            layers = <1 2>;
            require-prior-idle-ms = <150>;
        };
        combo_switch_cyr {
            key-positions = <44 45>;
            bindings = <&switch_cyr>;
            layers = <0 3 4 5 6 7 8>;
            require-prior-idle-ms = <150>;
        };
        // Lang {
        //     bindings = <&Change_lang>;
        //     key-positions = <44 45>;
        //     require-prior-idle-ms = <150>;
        // };
        // Cyr {
        //     bindings = <&to 1>;
        //     layers = <0>;
        //     key-positions = <32 45>;
        //     require-prior-idle-ms = <150>;
        // };
        // Eng {
        //     bindings = <&to 0>;
        //     layers = <1 2>;
        //     key-positions = <32 45>;
        //     require-prior-idle-ms = <150>;
        // };
        // Close_wind {
        //     bindings = <&kp LG(W)>;
        //     key-positions = <4 5>;
        // };
        // Copy {
        //     bindings = <&kp LG(C)>;
        //     key-positions = <5 17>;
        // };
        // Paste {
        //     bindings = <&kp LG(V)>;
        //     key-positions = <17 29>;
        // };
        // Undo {
        //     bindings = <&kp LG(Z)>;
        //     key-positions = <6 18>;
        // };
        // Redo {
        //     bindings = <&kp LG(Y)>;
        //     key-positions = <18 34>;
        // };
        // New_wind {
        //     bindings = <&kp LG(N)>;
        //     key-positions = <6 7>;
        // };
        // Save {
        //     bindings = <&kp LG(S)>;
        //     key-positions = <28 29>;
        // };
        // New_tab {
        //     bindings = <&kp LG(T)>;
        //     key-positions = <34 35>;
        // };
        // Alfred {
        //     bindings = <&kp LA(SPACE)>;
        //     key-positions = <31 44>;
        // };
        // Caps {
        //     bindings = <&kp CAPS>;
        //     key-positions = <11 23>;
        // };
    };

        keymap {
        compatible = "zmk,keymap";

            _base {
            bindings = <
            // top line
            &mt LA(LC(LG(LEFT_SHIFT))) ESCAPE &kp Q &kp W &kp F &kp P &kp B  /* middle */ &kp J &kp L &kp U &kp Y &kp APOS &kp COLON
            // second line
            &mt LA(LC(LEFT_SHIFT)) TAB &hrm LCTRL A &hrm LALT R &hrm LGUI S &hrm LSHIFT T &kp G /* middle */ &kp M &hrm RSHIFT N &hrm RGUI E &hrm RALT I &hrm RCTRL O &kp SEMI
            // bottom main line
            &kp TILDE &kp Z  &kp X &kp C &kp D &kp V /* thumb cluster -> */ &mt LA(LC(LEFT_SHIFT)) SPACE &kp LSHFT /* middle */ &kp BSPC &kp DEL /* <- thumb cluster */ &kp K &kp H &kp COMMA &kp DOT &kp FSLH &kp QUESTION
            // bottom thumb cluster line
            &kp LEFT &kp RIGHT &lt 7 LG(V) &lt 5 LG(C) &lt 3 MINUS  /* middle */ &kp ENTER &lt 4 LPAR &lt 6 RPAR &kp DOWN &kp UP
            >;
        };

        _cyr_main {
            bindings = <
            // top line 
            &hyperr 0 ESCAPE &kp Q &kp W &kp E &kp R &kp T /* middle */ &kp Y &kp U &kp I &kp O &punct_cyr APOS &punct_cyr COLON
            // second line
            &mehr 0 TAB &ctlr 0 A &altr 0 S &guir 0 D &hrm LSHIFT F &lt 2 G /* middle */ &lt 2 H &hrm RSHIFT J &guir 0 K &altr 0 L &ctlr 0 SEMI &punct_cyr SEMI
            // bottom main line
            &trans &kp Z &kp X &kp C &kp V &kp B /* top thumb cluster line -> */ &mehr 0 SPACE &trans /* middle */ &trans &trans /* <- top thumb cluster line */ &kp N &kp M &punct_cyr COMMA &punct_cyr DOT &punct_cyr FSLH &punct_cyr QUESTION 
            // bottom thumb cluster line
            &trans &trans &msc 0 LG(V) &msc 0 LG(C) &msc 0 MINUS /* middle */ &trans &lt 4 LPAR &msc 0 RPAR &trans &trans           
            >;
        };

        _cyr_xtra {
            bindings = <
            // top line 
            &trans &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans &trans
            // second line
            &trans &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans &trans
            // bottom main line
            &trans &trans &trans &trans &trans &trans /* top thumb cluster line -> */ &trans &trans /* middle */ &trans &trans /* <- top thumb cluster line */ &trans &trans &trans &trans &trans &trans 
            // bottom thumb cluster line
            &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans  
            >;
        };

        _num {
            bindings = <
            // top line 
            &trans &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans &trans
            // second line
            &trans &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans &trans
            // bottom main line
            &trans &trans &trans &trans &trans &trans /* top thumb cluster line -> */ &trans &trans /* middle */ &trans &trans /* <- top thumb cluster line */ &trans &trans &trans &trans &trans &trans 
            // bottom thumb cluster line
            &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans  
            >;
        };

        _navi {
            bindings = <
            // top line 
            &trans &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans &trans
            // second line
            &trans &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans &trans
            // bottom main line
            &trans &trans &trans &trans &trans &trans /* top thumb cluster line -> */ &trans &trans /* middle */ &trans &trans /* <- top thumb cluster line */ &trans &trans &trans &trans &trans &trans 
            // bottom thumb cluster line
            &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans  
            >;
        };

        _symbol {
            bindings = <
            // top line 
            &trans &kp G &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans &trans
            // second line
            &trans &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans &trans
            // bottom main line
            &trans &trans &trans &trans &trans &trans /* top thumb cluster line -> */ &trans &trans /* middle */ &trans &trans /* <- top thumb cluster line */ &trans &trans &trans &trans &trans &trans 
            // bottom thumb cluster line
            &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans  
            >;
        };

        _function {
            bindings = <
            // top line 
            &trans &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans &trans
            // second line
            &trans &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans &trans
            // bottom main line
            &trans &trans &trans &trans &trans &trans /* top thumb cluster line -> */ &trans &trans /* middle */ &trans &trans /* <- top thumb cluster line */ &trans &trans &trans &trans &trans &trans 
            // bottom thumb cluster line
            &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans  
            >;
        };

        _typography {
            bindings = <
            // top line 
            &trans &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans &trans
            // second line
            &trans &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans &trans
            // bottom main line
            &trans &trans &trans &trans &trans &trans /* top thumb cluster line -> */ &trans &trans /* middle */ &trans &trans /* <- top thumb cluster line */ &trans &trans &trans &trans &trans &trans 
            // bottom thumb cluster line
            &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans  
            >;
        };
        _bluetooth {
            bindings = <
            // top line 
            &trans &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans &trans
            // second line
            &trans &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans &trans
            // bottom main line
            &trans &trans &trans &trans &trans &trans /* top thumb cluster line -> */ &trans &trans /* middle */ &trans &trans /* <- top thumb cluster line */ &trans &trans &trans &trans &trans &trans 
            // bottom thumb cluster line
            &trans &trans &trans &trans &trans /* middle */ &trans &trans &trans &trans &trans  
            >;
        };

        };
    };