/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define HOST_OS 2  // set to 2 for macOS/Windows-Alt-Codes, default is 0 (Windows)
#include "../zmk-nodefree-config/helper.h"

//                name     unshifted         shifted
ZMK_UNICODE_PAIR( de_ae,   N0, N0,  E, N4,   N0, N0,  C, N4 )
ZMK_UNICODE_PAIR( de_oe,   N0, N0,  F, N6,   N0, N0,  D, N6 )
ZMK_UNICODE_PAIR( de_ue,   N0, N0,  F,  C,   N0, N0,  D,  C )
ZMK_UNICODE_PAIR(ru_a,    N0, N4,  N3,  N0,   N0, N4,  N1,  N0) // а, А: U+0430, U+0410
ZMK_UNICODE_PAIR(ru_b,    N0, N4,  N3,  N1,   N0, N4,  N1,  N1) // б, Б: U+0431, U+0411
ZMK_UNICODE_PAIR(ru_v,    N0, N4,  N3,  N2,  N0, N4,  N1,  N2) // в, В: U+0432, U+0412
ZMK_UNICODE_PAIR(ru_g,    N0, N4,  N3,  N3,  N0, N4,  N1,  N3) // г, Г: U+0433, U+0413
ZMK_UNICODE_PAIR(ru_d,    N0, N4,  N3,  N4,  N0, N4,  N1,  N4) // д, Д: U+0434, U+0414
ZMK_UNICODE_PAIR(ru_je,    N0, N4,  N3,  N5,  N0, N4,  N1,  N5) // е, Е: U+0435, U+0415
ZMK_UNICODE_PAIR(ru_jo,   N0, N4,  N5,  N1,  N0, N4,  N0,  N1) // ё, Ё: U+0451, U+0401
ZMK_UNICODE_PAIR(ru_zh,   N0, N4,  N3,  N6,  N0, N4,  N1,  N6) // ж, Ж: U+0436, U+0416
ZMK_UNICODE_PAIR(ru_z,    N0, N4,  N3,  N7,  N0, N4,  N1,  N7) // з, З: U+0437, U+0417
ZMK_UNICODE_PAIR(ru_i,    N0, N4,  N3,  N8,  N0, N4,  N1,  N8) // и, И: U+0438, U+0418
ZMK_UNICODE_PAIR(ru_j,    N0, N4,  N3,  N9,  N0, N4,  N1,  N9) // й, Й: U+0439, U+0419
ZMK_UNICODE_PAIR(ru_k,    N0, N4,  N3,  A,   N0, N4,  N1,  A) // к, К: U+043A, U+041A
ZMK_UNICODE_PAIR(ru_l,    N0, N4,  N3,  B,   N0, N4,  N1,  B) // л, Л: U+043B, U+041B
ZMK_UNICODE_PAIR(ru_m,    N0, N4,  N3,  C,   N0, N4,  N1,  C) // м, М: U+043C, U+041C
ZMK_UNICODE_PAIR(ru_n,    N0, N4,  N3,  D,   N0, N4,  N1,  D) // н, Н: U+043D, U+041D
ZMK_UNICODE_PAIR(ru_o,    N0, N4,  N3,  E,   N0, N4,  N1,  E) // о, О: U+043E, U+041E
ZMK_UNICODE_PAIR(ru_p,    N0, N4,  N3,  F,   N0, N4,  N1,  F) // п, П: U+043F, U+041F
ZMK_UNICODE_PAIR(ru_r,    N0, N4,  N4,  N0,  N0, N4,  N2,  N0) // р, Р: U+0440, U+0420
ZMK_UNICODE_PAIR(ru_s,    N0, N4,  N4,  N1,  N0, N4,  N2,  N1) // с, С: U+0441, U+0421
ZMK_UNICODE_PAIR(ru_t,    N0, N4,  N4,  N2,  N0, N4,  N2,  N2) // т, Т: U+0442, U+0422
ZMK_UNICODE_PAIR(ru_u,    N0, N4,  N4,  N3,  N0, N4,  N2,  N3) // у, У: U+0443, U+0423
ZMK_UNICODE_PAIR(ru_f,    N0, N4,  N4,  N4,  N0, N4,  N2,  N4) // ф, Ф: U+0444, U+0424
ZMK_UNICODE_PAIR(ru_kh,   N0, N4,  N4,  N5,  N0, N4,  N2,  N5) // х, Х: U+0445, U+0425
ZMK_UNICODE_PAIR(ru_ts,   N0, N4,  N4,  N6,  N0, N4,  N2,  N6) // ц, Ц: U+0446, U+0426
ZMK_UNICODE_PAIR(ru_ch,   N0, N4,  N4,  N7,  N0, N4,  N2,  N7) // ч, Ч: U+0447, U+0427
ZMK_UNICODE_PAIR(ru_sh,   N0, N4,  N4,  N8,  N0, N4,  N2,  N8) // ш, Ш: U+0448, U+0428
ZMK_UNICODE_PAIR(ru_sch,  N0, N4,  N4,  N9,  N0, N4,  N2,  N9) // щ, Щ: U+0449, U+0429
ZMK_UNICODE_PAIR(ru_tz,   N0, N4,  N4,  A,   N0, N4,  N2,  A) // ъ, Ъ: U+044A, U+042A
ZMK_UNICODE_PAIR(ru_y,    N0, N4,  N4,  B,   N0, N4,  N2,  B) // ы, Ы: U+044B, U+042B
ZMK_UNICODE_PAIR(ru_mz,   N0, N4,  N4,  C,   N0, N4,  N2,  C) // ь, Ь: U+044C, U+042C
ZMK_UNICODE_PAIR(ru_e,   N0, N4,  N4,  D,   N0, N4,  N2,  D) // э, Э: U+044D, U+042D
ZMK_UNICODE_PAIR(ru_ju,   N0, N4,  N4,  E,   N0, N4,  N2,  E) // ю, Ю: U+044E, U+042E
ZMK_UNICODE_PAIR(ru_ja,   N0, N4,  N4,  F,   N0, N4,  N2,  F) // я, Я: U+044F, U+042F
ZMK_UNICODE_SINGLE(em_dash,        N2, N0, N1, N4)  // —: U+2014
ZMK_UNICODE_SINGLE(horizontal_bar, N2, N0, N1, N5)  // ―: U+2015
ZMK_UNICODE_SINGLE(ellipsis,       N2, N0, N2, N6)  // …: U+2026
ZMK_UNICODE_SINGLE(pound,          N0, N0, A, N3)  // £: U+00A3
ZMK_UNICODE_SINGLE(dollar,         N0, N0, N2, N4)  // $: U+0024
ZMK_UNICODE_SINGLE(rouble,         N2, N0, B, D)  // ₽: U+20BD
ZMK_UNICODE_SINGLE(euro,           N2, N0, A, C)  // €: U+20AC
ZMK_UNICODE_SINGLE(leq,            N2, N2, N6, N4)  // ≤: U+2264
ZMK_UNICODE_SINGLE(geq,            N2, N2, N6, N5)  // ≥: U+2265
ZMK_UNICODE_SINGLE(approx,         N2, N2, N4, N8)  // ≈: U+2248
ZMK_UNICODE_SINGLE(times,          N0, N0, D, N7)  // ×: U+00D7
ZMK_UNICODE_SINGLE(ldquo,          N2, N0, N1, E)  // „: U+201E
ZMK_UNICODE_SINGLE(rdquo,          N2, N0, N1, C)  // “: U+201C
ZMK_UNICODE_SINGLE(laquo,          N0, N0, A, B)  // «: U+00AB
ZMK_UNICODE_SINGLE(raquo,          N0, N0, B, B)  // »: U+00BB
ZMK_UNICODE_SINGLE(bullet,         N2, N0, N2, N2)  // •: U+2022
ZMK_UNICODE_SINGLE(plusminus,      N0, N0, B, N1)  // ±: U+00B1
ZMK_UNICODE_SINGLE(degree,         N0, N0, B, N0)  // °: U+00B0
ZMK_UNICODE_SINGLE(div,            N0, N0, F, N7)  // ÷: U+00F7
ZMK_UNICODE_SINGLE(neq,            N2, N2, N6, N0)  // ≠: U+2260
ZMK_UNICODE_SINGLE(copy,           N0, N0, A, N9)  // ©: U+00A9
ZMK_UNICODE_SINGLE(trade,          N2, N2, N2, N2)  // ™: U+2122
ZMK_UNICODE_SINGLE(inverted_question_mark, N0, N0, B, F)  // ¿: U+00BF
ZMK_UNICODE_PAIR(a_acute,      N0, N0,  E,  N1,   N0, N0,  C,  N1) // á, Á: U+00E1, U+00C1
ZMK_UNICODE_PAIR(e_acute,      N0, N0,  E,  N9,   N0, N0,  C,  N9) // é, É: U+00E9, U+00C9
ZMK_UNICODE_PAIR(i_acute,      N0, N0,  E,  D,   N0, N0,  C,  D) // í, Í: U+00ED, U+00CD
ZMK_UNICODE_PAIR(o_acute,      N0, N0,  F,  N3,   N0, N0,  D,  N3) // ó, Ó: U+00F3, U+00D3
ZMK_UNICODE_PAIR(u_acute,      N0, N0,  F,  A,   N0, N0,  D,  A) // ú, Ú: U+00FA, U+00DA
ZMK_UNICODE_PAIR(c_cedilla,    N0, N0,  E,  N7,   N0, N0,  C,  N7) // ç, Ç: U+00E7, U+00C7
ZMK_UNICODE_PAIR(n_tilde,      N0, N0,  F,  N1,   N0, N0,  D,  N1) // ñ, Ñ: U+00F1, U+00D1
ZMK_UNICODE_PAIR(a_grave,      N0, N0,  E,  N0,   N0, N0,  C,  N0) // à, À: U+00E0, U+00C0
ZMK_UNICODE_PAIR(e_grave,      N0, N0,  E,  N8,   N0, N0,  C,  N8) // è, È: U+00E8, U+00C8
ZMK_UNICODE_PAIR(i_grave,      N0, N0,  E,  C,   N0, N0,  C,  C) // ì, Ì: U+00EC, U+00CC
ZMK_UNICODE_PAIR(o_grave,      N0, N0,  F,  N2,   N0, N0,  D,  N2) // ò, Ò: U+00F2, U+00D2
ZMK_UNICODE_PAIR(u_grave,      N0, N0,  F,  N9,   N0, N0,  D,  N9) // ù, Ù: U+00F9, U+00D9
ZMK_UNICODE_PAIR(a_circumflex, N0, N0,  E,  N2,   N0, N0,  C,  N2) // â, Â: U+00E2, U+00C2
ZMK_UNICODE_PAIR(e_circumflex, N0, N0,  E,  A,   N0, N0,  C,  A) // ê, Ê: U+00EA, U+00CA
ZMK_UNICODE_PAIR(i_circumflex, N0, N0,  E,  E,   N0, N0,  C,  E) // î, Î: U+00EE, U+00CE
ZMK_UNICODE_PAIR(o_circumflex, N0, N0,  F,  N4,   N0, N0,  D,  N4) // ô, Ô: U+00F4, U+00D4
ZMK_UNICODE_PAIR(u_circumflex, N0, N0,  F,  B,   N0, N0,  D,  B) // û, Û: U+00FB, U+00DB
ZMK_UNICODE_PAIR(a_diaeresis,  N0, N0,  E,  N4,   N0, N0,  C,  N4) // ä, Ä: U+00E4, U+00C4
ZMK_UNICODE_PAIR(e_diaeresis,  N0, N0,  E,  B,   N0, N0,  C,  B) // ë, Ë: U+00EB, U+00CB
ZMK_UNICODE_PAIR(i_diaeresis,  N0, N0,  E,  F,   N0, N0,  C,  F) // ï, Ï: U+00EF, U+00CF

/ {
    combos {
        compatible = "zmk,combos";

        Lang {
            bindings = <&Change_lang>;
            key-positions = <44 45>;
            require-prior-idle-ms = <150>;
        };
        Cyr {
            bindings = <&to 1>;
            layers = <0>;
            key-positions = <32 45>;
            require-prior-idle-ms = <150>;
        };
        Eng {
            bindings = <&to 0>;
            layers = <1 2>;
            key-positions = <32 45>;
            require-prior-idle-ms = <150>;
        };
        Close_wind {
            bindings = <&kp LG(W)>;
            key-positions = <4 5>;
        };
        Copy {
            bindings = <&kp LG(C)>;
            key-positions = <5 17>;
        };
        Paste {
            bindings = <&kp LG(V)>;
            key-positions = <17 29>;
        };
        Undo {
            bindings = <&kp LG(Z)>;
            key-positions = <6 18>;
        };
        Redo {
            bindings = <&kp LG(Y)>;
            key-positions = <18 34>;
        };
        New_wind {
            bindings = <&kp LG(N)>;
            key-positions = <6 7>;
        };
        Save {
            bindings = <&kp LG(S)>;
            key-positions = <28 29>;
        };
        New_tab {
            bindings = <&kp LG(T)>;
            key-positions = <34 35>;
        };
        Alfred {
            bindings = <&kp LA(SPACE)>;
            key-positions = <31 44>;
        };
        Caps {
            bindings = <&kp CAPS>;
            key-positions = <11 23>;
        };
    };

    macros {
        Switch_cyr: Switch_cyr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_press>,
                <&to 1>;

            label = "SWITCH_CYR";
        };
        Command_eng: Command_eng {
            label = "COMMAND_ENG";
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings
                = <&macro_param_1to1>
                , <&macro_press &mo 0>
                , <&macro_param_2to1>
                , <&macro_press &kp LEFT_GUI>
                , <&macro_pause_for_release>
                , <&macro_param_2to1>
                , <&macro_release &kp LEFT_GUI>
                , <&macro_param_1to1>
                , <&macro_release &mo 0>
                ;
        };

        Option_eng: Option_eng {
            label = "OPTION_ENG";
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings
                = <&macro_param_1to1>
                , <&macro_press &mo 0>
                , <&macro_param_2to1>
                , <&macro_press &kp LEFT_ALT>
                , <&macro_pause_for_release>
                , <&macro_param_2to1>
                , <&macro_release &kp LEFT_ALT>
                , <&macro_param_1to1>
                , <&macro_release &mo 0>
                ;
        };

        Control_eng: Control_eng {
            label = "CONTROL_ENG";
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings
                = <&macro_param_1to1>
                , <&macro_press &mo 0>
                , <&macro_param_2to1>
                , <&macro_press &kp LEFT_CONTROL>
                , <&macro_pause_for_release>
                , <&macro_param_2to1>
                , <&macro_release &kp LEFT_CONTROL>
                , <&macro_param_1to1>
                , <&macro_release &mo 0>
                ;
        };


        Hyper_eng: Hyper_eng {
            label = "HYPER_ENG";
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings
                = <&macro_param_1to1>
                , <&macro_press &mo 0>
                , <&macro_param_2to1>
                , <&macro_press &kp LA(LC(LG(LEFT_SHIFT)))>
                , <&macro_pause_for_release>
                , <&macro_param_2to1>
                , <&macro_release &kp LA(LC(LG(LEFT_SHIFT)))>
                , <&macro_param_1to1>
                , <&macro_release &mo 0>
                ;
        };

        Meh_eng: Meh_eng {
            label = "Meh_ENG";
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings
                = <&macro_param_1to1>
                , <&macro_press &mo 0>
                , <&macro_param_2to1>
                , <&macro_press &kp LA(LC(LEFT_SHIFT))>
                , <&macro_pause_for_release>
                , <&macro_param_2to1>
                , <&macro_release &kp LA(LC(LEFT_SHIFT))>
                , <&macro_param_1to1>
                , <&macro_release &mo 0>
                ;
        };

        Switch_eng: Switch_eng {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_press>,
                <&to 0>;

            label = "SWITCH_ENG";
        };
        Switch_tap: Switch_tap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &kp LG(SPACE)>;
            label = "SWITCH_TAP";
            tap-ms = <300>;
        };
        Change_lang: Change_lang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LGUI>;

            label = "CHANGE_LANG";
        };
    };

    behaviors {
        Tap_hold: Tap_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };
        Tap_layer: Tap_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };


        Ru_hyper: Ru_hyper {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_HYPER";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&Hyper_eng>, <&kp>; //&macro on hold, &kp on tap
        };


        Ru_meh: Ru_meh {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_MEH";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&Meh_eng>, <&kp>; //&macro on hold, &kp on tap
        };

        Ru_f_macro: Ru_f_macro {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_F_MACRO";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&Control_eng>, <&ru_f>; //&macro on hold, &ru_f on tap
        };

        Ru_y_macro: Ru_y_macro {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_Y_MACRO";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&Option_eng>, <&ru_y>; //&macro on hold, &ru_y on tap
        };

        Ru_v_macro: Ru_v_macro {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_V_MACRO";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&Command_eng>, <&ru_v>; //&macro on hold, &ru_v on tap
        };

        Ru_a_hold: Ru_a_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_A_HOLD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&ru_a>; //&kp on hold, &ru_a on tap
        };

        Ru_o_hold: Ru_o_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_O_HOLD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&ru_o>; //&kp on hold, &ru_o on tap
        };

        O_grave_hold: O_grave_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "O_GRAVE_HOLD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&o_grave>; //&kp on hold, &o_grave on tap
        };

        Ru_l_macro: Ru_l_macro {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_L_MACRO";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&Command_eng>, <&ru_l>; //&macro on hold, &ru_l on tap
        };

        Ru_d_macro: Ru_d_macro {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_D_MACRO";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&Option_eng>, <&ru_d>; //&macro on hold, &ru_d on tap
        };

        Ru_zh_macro: Ru_zh_macro {
            compatible = "zmk,behavior-hold-tap";
            label = "RU_ZH_MACRO";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&Control_eng>, <&ru_zh>; //&macro on hold, &ru_zh on tap
        };
     };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&Tap_hold LA(LC(LG(LEFT_SHIFT))) ESCAPE  &kp Q  &kp W  &kp F  &kp P  &kp B                                                                                        &kp J    &kp L      &kp U      &kp Y    &kp APOS  &kp COLON
&Tap_hold LA(LC(LEFT_SHIFT)) TAB        &Tap_hold LEFT_CONTROL A  &Tap_hold LEFT_ALT R  &Tap_hold LEFT_GUI S  &Tap_hold LEFT_SHIFT T  &kp G                                                                                        &kp M    &Tap_hold RIGHT_SHIFT N      &Tap_hold RIGHT_GUI E      &Tap_hold RIGHT_ALT I    &Tap_hold RIGHT_CONTROL O     &kp SEMI
&kp TILDE                               &kp Z  &kp X  &kp C  &kp D                                     &kp V                     &mt LA(LC(LG(LEFT_SHIFT))) SPACE  &kp LSHFT  &kp BSPC      &kp DEL     &kp K    &kp H      &kp COMMA  &kp DOT  &kp FSLH  &kp QUESTION
                                                        &kp LEFT  &kp RIGHT  &mo 7  &mo 5  &mo 3  &kp ENTER  &mo 4  &mo 6  &kp DOWN  &kp UP
            >;
        };

        cyr_main {
            bindings = <
&Ru_hyper 0 ESCAPE  &ru_j  &ru_ts  &ru_u  &ru_k      &ru_je                                                                         &ru_n       &ru_g       &ru_sh          &ru_sch      &kp DOUBLE_QUOTES  &kp COLON
&Ru_meh 0 TAB    &Ru_f_macro 0 0  &Ru_y_macro 0 0  &Ru_v_macro 0 0  &Ru_a_hold LEFT_SHIFT 0      &ru_p                                                              &ru_r       &Ru_o_hold RIGHT_SHIFT 0      &Ru_l_macro 0 0       &Ru_d_macro 0 0     &Ru_zh_macro  0 0   &kp SEMI
&mo 2 &ru_ja  &ru_ch  &ru_s  &ru_m      &ru_i             &Ru_hyper 0 SPACE  &kp LSHFT  &kp BSPC      &kp DEL          &ru_t       &ru_mz       &kp COMMA  &kp DOT  &kp FSLH  &kp QUESTION
                                                        &kp LEFT  &kp RIGHT  &mo 7  &mo 5  &mo 3  &kp ENTER  &mo 4  &mo 6  &kp DOWN  &kp UP
            >;
        };

        cyr_xtra {
            bindings = <
&Ru_hyper 0 ESCAPE      &ru_jo  &trans  &trans  &trans  &trans                                  &trans  &trans  &trans     &trans       &ru_z  &ru_kh
&Ru_meh 0 TAB       &Control_eng 0 0  &Option_eng 0 0  &Command_eng 0 0  &kp LEFT_SHIFT  &trans                                  &trans  &kp RIGHT_SHIFT  &Command_eng  0 0   &Option_eng 0 0      &Control_eng 0 0         &ru_e
&trans  &trans  &trans  &trans  &trans  &trans  &Ru_hyper 0 SPACE  &kp LSHFT  &kp BSPC      &kp DEL  &trans  &ru_tz  &ru_b  &ru_ju  &trans          &trans
                             &kp LEFT  &kp RIGHT  &mo 7  &mo 5  &mo 3  &kp ENTER  &mo 4  &mo 6  &kp DOWN  &kp UP
            >;
        };

        num {
            bindings = <
&times   &kp KP_MINUS  &kp N7  &kp N8  &kp N9            &kp KP_PLUS                                                                  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LT  &kp GT  &kp APOS      &kp COLON
&div      &kp KP_MULTIPLY     &kp N4  &kp N5  &kp N6            &kp KP_DIVIDE                                                                   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &leq          &geq           &kp UNDER      &kp SEMICOLON
&approx  &kp KP_EQUAL       &kp N1  &kp N2  &kp N3            &kp N0     &mt LA(LC(LG(LEFT_SHIFT))) SPACE  &kp LSHFT  &kp BSPC      &kp DEL         &kp LEFT_BRACE         &kp RIGHT_BRACE       &kp COMMA       &kp PERIOD       &kp BACKSLASH  &kp QUESTION
                                   &kp LEFT  &kp RIGHT  &mo 7  &mo 5  &trans  &kp ENTER  &mo 4  &mo 6  &kp DOWN  &kp UP
            >;
        };

        navi {
            bindings = <
&kp LA(LC(LS(N2)))  &kp LA(LC(LS(N3)))  &kp LA(LC(LG(LS(LEFT))))  &kp LA(LC(LG(LS(RIGHT)))) &kp LA(LC(LG(LS(UP))))            &kp LEFT_ALT                                                             &kp LEFT  &kp DOWN    &kp UP          &kp RIGHT        &kp LA(LC(LS(N2)))     &kp LA(LC(LS(N3)))
&kp LA(LC(LS(N1)))                                    &kp LA(LC(LS(N4)))  &trans  &trans  &kp LA(LC(LG(LS(DOWN))))            &kp LEFT_GUI                                                             &kp HOME  &kp PAGE_UP  &kp PAGE_DOWN  &kp END  &kp LA(LC(LS(N1)))  &kp LA(LC(LS(N4)))
&kp LA(LC(LS(N9)))                               &trans  &trans  &trans  &trans            &kp LS(LGUI)        &mt LA(LC(LG(LEFT_SHIFT))) SPACE  &kp LSHFT  &kp BSPC      &kp DEL  &trans  &trans   &trans   &trans   &trans    &kp LA(LC(LS(N9)))
                                                          &kp LEFT  &kp RIGHT  &mo 7  &mo 5  &trans  &kp ENTER  &trans  &mo 6  &kp DOWN  &kp UP
            >;
        };

        symbol {
            bindings = <
&euro      &approx  &kp AMPERSAND   &kp KP_MULTIPLY  &kp UNDER  &kp BACKSLASH                                  &ldquo      &rdquo      &em_dash  &ellipsis  &copy    &trans &rouble
&kp GRAVE  &dollar  &kp PERCENT  &kp CARET  &kp FSLH            &laquo                                             &raquo      &horizontal_bar      &degree     &trade          &trans  &pound
&kp TILDE      &kp EXCL  &kp AT     &kp POUND  &kp PIPE    &mt LA(LC(LG(LEFT_SHIFT))) SPACE  &kp LSHFT  &kp BSPC      &kp DEL        &kp LPAR             &kp RPAR &plusminus  &bullet  &neq  &inverted_question_mark
&kp LEFT  &kp RIGHT  &mo 7  &trans  &mo 3  &kp ENTER  &mo 4  &mo 6  &kp DOWN  &kp UP
            >;
        };

        function {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp F9 &kp LG(S)                                 &kp LG(C)  &kp LG(V)  &kp LG(X)  &kp K_MUTE        &kp C_VOL_UP    &kp C_VOL_DN
&trans  &kp F11  &kp F4      &kp F5  &kp F6  &kp LG(T)                            &kp LG(Z)     &kp LG(Y)  &trans  &kp C_PLAY_PAUSE  &kp C_PREVIOUS  &kp C_NEXT
&kp LG(COMMA)  &kp F10  &kp F1      &kp F2        &kp F3   &kp LG(N)        &mt LA(LC(LG(LEFT_SHIFT))) SPACE  &kp LSHFT  &kp BSPC      &kp DEL  &kp LG(W)     &kp LG(Q)     &trans     &trans            &kp C_BRI_UP          &kp C_BRI_DN
                            &kp LEFT  &kp RIGHT  &mo 7  &mo 6  &mo 3  &kp ENTER  &mo 4  &trans  &kp DOWN  &kp UP
            >;
        };

        typography {
            bindings = <
&a_acute  &a_diaeresis  &e_circumflex  &i_grave  &o_acute  &u_acute                                  &c_cedilla  &trans  &trans  &trans        &trans    &trans
&a_grave  &e_acute  &e_diaeresis      &i_circumflex  &O_grave_hold LEFT_SHIFT 0 &u_grave                                        &n_tilde     &kp RIGHT_SHIFT  &trans  &trans  &trans  &trans
&a_circumflex  &e_grave  &i_acute      &i_diaeresis        &o_circumflex        &u_circumflex        &mt LA(LC(LG(LEFT_SHIFT))) SPACE  &kp LSHFT  &kp BSPC      &kp DEL  &trans     &trans     &trans     &trans            &trans          &trans
                            &kp LEFT  &kp RIGHT  &mo 7  &mo 6  &mo 3  &kp ENTER  &mo 4  &trans  &kp DOWN  &kp UP
            >;
        };
    };
};
