/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define HOST_OS 2  // set to 2 for macOS/Windows-Alt-Codes, default is 0 (Windows)
#include "../zmk-nodefree-config/helper.h"

//                name     unshifted         shifted
ZMK_UNICODE_PAIR( de_ae,   N0, N0,  E, N4,   N0, N0,  C, N4 )
ZMK_UNICODE_PAIR( de_oe,   N0, N0,  F, N6,   N0, N0,  D, N6 )
ZMK_UNICODE_PAIR( de_ue,   N0, N0,  F,  C,   N0, N0,  D,  C )
ZMK_UNICODE_PAIR(ru_a,    N0, N4,  N3,  E,   N0, N4,  N2,  E) // а, А: U+0430, U+0410
ZMK_UNICODE_PAIR(ru_b,    N0, N4,  N3,  F,   N0, N4,  N2,  F) // б, Б: U+0431, U+0411
ZMK_UNICODE_PAIR(ru_v,    N0, N4,  N3,  N0,  N0, N4,  N2,  N0) // в, В: U+0432, U+0412
ZMK_UNICODE_PAIR(ru_g,    N0, N4,  N3,  N1,  N0, N4,  N2,  N1) // г, Г: U+0433, U+0413
ZMK_UNICODE_PAIR(ru_d,    N0, N4,  N3,  N2,  N0, N4,  N2,  N2) // д, Д: U+0434, U+0414
ZMK_UNICODE_PAIR(ru_je,    N0, N4,  N3,  N5,  N0, N4,  N2,  N5) // е, Е: U+0435, U+0415
ZMK_UNICODE_PAIR(ru_jo,   N0, N4,  N5,  N1,  N0, N4,  N0,  N1) // ё, Ё: U+0451, U+0401
ZMK_UNICODE_PAIR(ru_zh,   N0, N4,  N3,  N6,  N0, N4,  N2,  N6) // ж, Ж: U+0436, U+0416
ZMK_UNICODE_PAIR(ru_z,    N0, N4,  N3,  N7,  N0, N4,  N2,  N7) // з, З: U+0437, U+0417
ZMK_UNICODE_PAIR(ru_i,    N0, N4,  N3,  N8,  N0, N4,  N2,  N8) // и, И: U+0438, U+0418
ZMK_UNICODE_PAIR(ru_j,    N0, N4,  N3,  N9,  N0, N4,  N2,  N9) // й, Й: U+0439, U+0419
ZMK_UNICODE_PAIR(ru_k,    N0, N4,  N3,  A,   N0, N4,  N2,  A) // к, К: U+043A, U+041A
ZMK_UNICODE_PAIR(ru_l,    N0, N4,  N3,  B,   N0, N4,  N2,  B) // л, Л: U+043B, U+041B
ZMK_UNICODE_PAIR(ru_m,    N0, N4,  N3,  C,   N0, N4,  N2,  C) // м, М: U+043C, U+041C
ZMK_UNICODE_PAIR(ru_n,    N0, N4,  N3,  D,   N0, N4,  N2,  D) // н, Н: U+043D, U+041D
ZMK_UNICODE_PAIR(ru_o,    N0, N4,  N3,  E,   N0, N4,  N2,  E) // о, О: U+043E, U+041E
ZMK_UNICODE_PAIR(ru_p,    N0, N4,  N3,  F,   N0, N4,  N2,  F) // п, П: U+043F, U+041F
ZMK_UNICODE_PAIR(ru_r,    N0, N4,  N4,  N0,  N0, N4,  N2,  N0) // р, Р: U+0440, U+0420
ZMK_UNICODE_PAIR(ru_s,    N0, N4,  N4,  N1,  N0, N4,  N2,  N1) // с, С: U+0441, U+0421
ZMK_UNICODE_PAIR(ru_t,    N0, N4,  N4,  N2,  N0, N4,  N2,  N2) // т, Т: U+0442, U+0422
ZMK_UNICODE_PAIR(ru_u,    N0, N4,  N4,  N3,  N0, N4,  N2,  N3) // у, У: U+0443, U+0423
ZMK_UNICODE_PAIR(ru_f,    N0, N4,  N4,  N4,  N0, N4,  N2,  N4) // ф, Ф: U+0444, U+0424
ZMK_UNICODE_PAIR(ru_kh,   N0, N4,  N4,  N5,  N0, N4,  N2,  N5) // х, Х: U+0445, U+0425
ZMK_UNICODE_PAIR(ru_ts,   N0, N4,  N4,  N6,  N0, N4,  N2,  N6) // ц, Ц: U+0446, U+0426
ZMK_UNICODE_PAIR(ru_ch,   N0, N4,  N4,  N7,  N0, N4,  N2,  N7) // ч, Ч: U+0447, U+0427
ZMK_UNICODE_PAIR(ru_sh,   N0, N4,  N4,  N8,  N0, N4,  N2,  N8) // ш, Ш: U+0448, U+0428
ZMK_UNICODE_PAIR(ru_sch,  N0, N4,  N4,  N9,  N0, N4,  N2,  N9) // щ, Щ: U+0449, U+0429
ZMK_UNICODE_PAIR(ru_tz,   N0, N4,  N4,  A,   N0, N4,  N2,  A) // ъ, Ъ: U+044A, U+042A
ZMK_UNICODE_PAIR(ru_y,    N0, N4,  N4,  B,   N0, N4,  N2,  B) // ы, Ы: U+044B, U+042B
ZMK_UNICODE_PAIR(ru_mz,   N0, N4,  N4,  C,   N0, N4,  N2,  C) // ь, Ь: U+044C, U+042C
ZMK_UNICODE_PAIR(ru_e,   N0, N4,  N4,  D,   N0, N4,  N2,  D) // э, Э: U+044D, U+042D
ZMK_UNICODE_PAIR(ru_ju,   N0, N4,  N4,  E,   N0, N4,  N2,  E) // ю, Ю: U+044E, U+042E
ZMK_UNICODE_PAIR(ru_ja,   N0, N4,  N4,  F,   N0, N4,  N2,  F) // я, Я: U+044F, U+042F
ZMK_UNICODE_PAIR(em_dash,          N8, N2, N1, N2,   N8, N2, N1, N2) // —, —: U+2014
ZMK_UNICODE_PAIR(horizontal_bar,   N8, N2, N1, N5,   N8, N2, N1, N5) // ―, ―: U+2015
ZMK_UNICODE_PAIR(ellipsis,         N8, N2, N3, N0,   N8, N2, N3, N0) // …, …: U+2026
ZMK_UNICODE_PAIR(pound,            N0, N0,  A,  N3,   N0, N0,  A,  N3) // £, £: U+00A3
ZMK_UNICODE_PAIR(dollar,           N0, N0,  N2, N4,   N0, N0,  N2, N4) // $, $: U+0024
ZMK_UNICODE_PAIR(rouble,           N8, N4,  N1,  E,   N8, N4,  N1,  E) // ₽, ₽: U+20BD
ZMK_UNICODE_PAIR(euro,             N0, N0,  AC, N0,   N0, N0,  AC, N0) // €, €: U+20AC
ZMK_UNICODE_PAIR(leq,              N8, N8,  N1,  N4,   N8, N8,  N1,  N4) // ≤, ≤: U+2264
ZMK_UNICODE_PAIR(geq,              N8, N8,  N1,  N5,   N8, N8,  N1,  N5) // ≥, ≥: U+2265
ZMK_UNICODE_PAIR(approx,           N8, N9,  N0,  N0,   N8, N9,  N0,  N0) // ≈, ≈: U+2248
ZMK_UNICODE_PAIR(times,            N0, N0,  D,  N7,   N0, N0,  D,  N7) // ×, ×: U+00D7
ZMK_UNICODE_PAIR(ldquo,            N8, N4,  N1,  E,   N8, N4,  N1,  E) // „, „: U+201E
ZMK_UNICODE_PAIR(rdquo,            N8, N4,  N1,  F,   N8, N4,  N1,  F) // “, “: U+201C
ZMK_UNICODE_PAIR(laquo,            N8, N4,  N1,  A,   N8, N4,  N1,  A) // «, «: U+00AB
ZMK_UNICODE_PAIR(raquo,            N8, N4,  N1,  B,   N8, N4,  N1,  B) // », »: U+00BB
ZMK_UNICODE_PAIR(bullet,           N8, N2,  N2,  N2,   N8, N2,  N2,  N2) // •, •: U+2022
ZMK_UNICODE_PAIR(plusminus,        N0, N0,  B,  N1,   N0, N0,  B,  N1) // ±, ±: U+00B1
ZMK_UNICODE_PAIR(degree,           N0, N0,  B,  N0,   N0, N0,  B,  N0) // °, °: U+00B0
ZMK_UNICODE_PAIR(div,              N0, N0,  F,  N7,   N0, N0,  F,  N7) // ÷, ÷: U+00F7
ZMK_UNICODE_PAIR(neq,              N8, N9,  N6,  N0,   N8, N9,  N6,  N0) // ≠, ≠: U+2260
ZMK_UNICODE_PAIR(copy,             N0, N0,  A,  N9,   N0, N0,  A,  N9) // ©, ©: U+00A9
ZMK_UNICODE_PAIR(trade,            N8, N4,  N2,  N2,   N8, N4,  N2,  N2) // ™, ™: U+2122
ZMK_UNICODE_PAIR(a_acute,      N0, N0,  E,  N1,   N0, N0,  C,  N1) // á, Á: U+00E1, U+00C1
ZMK_UNICODE_PAIR(e_acute,      N0, N0,  E,  N9,   N0, N0,  C,  N9) // é, É: U+00E9, U+00C9
ZMK_UNICODE_PAIR(i_acute,      N0, N0,  E,  D,   N0, N0,  C,  D) // í, Í: U+00ED, U+00CD
ZMK_UNICODE_PAIR(o_acute,      N0, N0,  F,  N3,   N0, N0,  D,  N3) // ó, Ó: U+00F3, U+00D3
ZMK_UNICODE_PAIR(u_acute,      N0, N0,  F,  A,   N0, N0,  D,  A) // ú, Ú: U+00FA, U+00DA
ZMK_UNICODE_PAIR(c_cedilla,    N0, N0,  E,  N7,   N0, N0,  C,  N7) // ç, Ç: U+00E7, U+00C7
ZMK_UNICODE_PAIR(n_tilde,      N0, N0,  F,  N1,   N0, N0,  D,  N1) // ñ, Ñ: U+00F1, U+00D1
ZMK_UNICODE_PAIR(a_grave,      N0, N0,  E,  N0,   N0, N0,  C,  N0) // à, À: U+00E0, U+00C0
ZMK_UNICODE_PAIR(e_grave,      N0, N0,  E,  N8,   N0, N0,  C,  N8) // è, È: U+00E8, U+00C8
ZMK_UNICODE_PAIR(i_grave,      N0, N0,  E,  C,   N0, N0,  C,  C) // ì, Ì: U+00EC, U+00CC
ZMK_UNICODE_PAIR(o_grave,      N0, N0,  F,  N2,   N0, N0,  D,  N2) // ò, Ò: U+00F2, U+00D2
ZMK_UNICODE_PAIR(u_grave,      N0, N0,  F,  N9,   N0, N0,  D,  N9) // ù, Ù: U+00F9, U+00D9
ZMK_UNICODE_PAIR(a_circumflex, N0, N0,  E,  N2,   N0, N0,  C,  N2) // â, Â: U+00E2, U+00C2
ZMK_UNICODE_PAIR(e_circumflex, N0, N0,  E,  A,   N0, N0,  C,  A) // ê, Ê: U+00EA, U+00CA
ZMK_UNICODE_PAIR(i_circumflex, N0, N0,  E,  E,   N0, N0,  C,  E) // î, Î: U+00EE, U+00CE
ZMK_UNICODE_PAIR(o_circumflex, N0, N0,  F,  N4,   N0, N0,  D,  N4) // ô, Ô: U+00F4, U+00D4
ZMK_UNICODE_PAIR(u_circumflex, N0, N0,  F,  B,   N0, N0,  D,  B) // û, Û: U+00FB, U+00DB
ZMK_UNICODE_PAIR(a_diaeresis,  N0, N0,  E,  N4,   N0, N0,  C,  N4) // ä, Ä: U+00E4, U+00C4
ZMK_UNICODE_PAIR(e_diaeresis,  N0, N0,  E,  B,   N0, N0,  C,  B) // ë, Ë: U+00EB, U+00CB
ZMK_UNICODE_PAIR(i_diaeresis,  N0, N0,  E,  F,   N0, N0,  C,  F) // ï, Ï: U+00EF, U+00CF

/ {
    combos {
        compatible = "zmk,combos";

        Lang {
            bindings = <&Change_lang>;
            key-positions = <30 43>;
            require-prior-idle-ms = <150>;
        };
    };

    macros {
        Switch_cyr: Switch_cyr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_press>,
                <&to 1>;

            label = "SWITCH_CYR";
        };
        Switch_eng: Switch_eng {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_press>,
                <&to 0>;

            label = "SWITCH_ENG";
        };
        Switch_tap: Switch_tap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &kp LG(SPACE)>;
            label = "SWITCH_TAP";
            tap-ms = <300>;
        };
        Change_lang: Change_lang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LGUI>;

            label = "CHANGE_LANG";
        };
    };

    behaviors {
        Hyper_esc: Hyper_esc {
            compatible = "zmk,behavior-hold-tap";
            label = "HYPER_ESC";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };
        cyrxtra_tab: cyrxtra_tab {
            compatible = "zmk,behavior-hold-tap";
            label = "CYRXTRA_TAB";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&Hyper_esc LA(LC(LG(LEFT_SHIFT))) ESCAPE  &kp Q  &kp W  &kp F  &kp P                                     &kp B                                                                                        &kp J    &kp L      &kp U      &kp Y    &kp APOS  &kp SEMI
&kp TAB                                   &kp A  &kp R  &kp S  &kp T                                     &kp G                                                                                        &kp M    &kp N      &kp E      &kp I    &kp O     &ru_ja
&Switch_cyr                               &kp Z  &kp X  &kp C  &kp D                                     &kp V                     &Hyper_esc LEFT_COMMAND LG(SPACE)  &kp RSHFT  &mo 3      &mo 4     &kp K    &kp H      &kp COMMA  &kp DOT  &kp FSLH  &ru_tz
                                                        &mo 5  &Hyper_esc LEFT_CONTROL LG(LEFT_CONTROL)  &Hyper_esc LALT LG(LALT)  &mo 6                              &kp SPACE  &kp ENTER  &kp BSPC  &kp DEL  &kp LG(C)  &kp LG(V)
            >;
        };

        cyr_base {
            bindings = <
&Hyper_esc LA(LC(LG(LEFT_SHIFT))) ESCAPE  &kp Q  &kp W  &kp E  &kp R      &kp T                                                                         &kp Y       &kp U       &kp I          &kp O      &kp LS(NUMBER_2)  &kp LS(NUMBER_4)
&kp TAB                                   &kp A  &kp S  &kp D  &kp F      &cyrxtra_tab 2 G                                                              &kp H       &kp J       &kp K          &kp L      &kp SEMICOLON     &kp MINUS
&to 0                                     &kp Z  &kp X  &kp C  &kp V      &kp B             &kp LEFT_COMMAND  &kp LEFT_SHIFT  &mo 3      &mo 4          &kp N       &kp M       &kp LS(SLASH)  &kp SLASH  &kp LS(PIPE)      &kp EQUAL
                                                        &mo 5  &kp LCTRL  &kp LALT          &mo 6             &kp SPACE       &kp ENTER  &kp BACKSPACE  &kp DELETE  &kp K_COPY  &kp K_PASTE
            >;
        };

        cyr_second {
            bindings = <
&kp TILDE    &trans  &trans  &trans  &trans  &trans                                  &trans  &trans  &trans     &kp P       &kp LEFT_BRACE  &kp RIGHT_BRACE
&trans       &trans  &trans  &trans  &trans  &trans                                  &trans  &trans  &trans     &trans      &trans          &kp SQT
&Switch_eng  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp COMMA  &kp PERIOD  &trans          &trans
                             &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        num {
            bindings = <
&kp ESCAPE   &kp ASTERISK  &kp N7  &kp N8  &kp N9            &kp SLASH                                                                  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp TILDE      &kp SEMICOLON
&kp TAB      &kp COMMA     &kp N4  &kp N5  &kp N6            &kp PLUS                                                                   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans          &trans           &kp GRAVE      &kp MINUS
&Switch_cyr  &kp DOT       &kp N1  &kp N2  &kp N3            &kp MINUS     &kp LEFT_COMMAND  &kp LEFT_SHIFT   &trans     &trans         &kp LESS_THAN         &kp GREATER_THAN       &kp COMMA       &kp PERIOD       &kp BACKSLASH  &kp EQUAL
                                   &mo 5   &kp LEFT_CONTROL  &kp LEFT_ALT  &mo 6             &kp KP_NUMBER_0  &kp ENTER  &kp BACKSPACE  &kp DELETE            &trans                 &trans
            >;
        };

        navi {
            bindings = <
&Hyper_esc LA(LC(LG(LEFT_SHIFT))) ESCAPE  &trans  &trans  &trans  &trans            &trans                                                             &trans  &trans    &trans          &trans        &trans     &trans
&trans                                    &trans  &trans  &trans  &trans            &trans                                                             &trans  &kp LEFT  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans
&Switch_cyr                               &trans  &trans  &trans  &trans            &trans        &kp LEFT_COMMAND  &kp LEFT_SHIFT  &trans     &trans  &trans  &kp HOME  &kp PAGE_DOWN   &kp PAGE_UP   &kp END    &trans
                                                          &trans  &kp LEFT_CONTROL  &kp LEFT_ALT  &trans            &kp SPACE       &kp ENTER  &trans  &trans  &trans    &trans
            >;
        };

        symbol {
            bindings = <
&kp EQUAL      &kp LS(AMPS)  &kp LS(STAR)   &kp LS(UNDER)  &kp LS(LEFT_BRACE)  &kp LS(RIGHT_BRACE)                                  &trans      &trans      &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &trans    &kp QUESTION
&kp LS(UNDER)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LBKT            &kp RBKT                                             &trans      &trans      &kp SEMICOLON     &kp COLON          &kp PIPE  &kp LS(BSLH)
&kp TILDE      &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp LPAR            &kp RPAR             &trans  &trans  &trans  &trans  &kp LS(LT)  &kp LS(GT)  &kp COMMA         &kp DOT            &kp FSLH  &kp LS(GRAVE)
                                            &trans         &trans              &trans               &trans  &trans  &trans  &trans  &trans      &trans      &trans
            >;
        };

        function_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |       |      |BT_CLR|BTSEL0|BTSEL1|BTSEL2|                                         |      |      |      |      |      |      |
            // |       |      |      |BTSEL3|BTSEL4|      |                                         |      |      |      |      |      |      |
            // |       |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |
            //                       |      |      |      |      |      |      |      |      |      |      |      |      |

            bindings = <
&trans  &trans  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2                                  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp K_MUTE        &kp C_VOL_DN    &kp C_VOLUME_UP
&trans  &trans  &trans      &bt BT_SEL 3  &bt BT_SEL 4  &trans                                        &trans     &kp LG(Z)  &kp LG(Y)  &kp C_PLAY_PAUSE  &kp C_PREVIOUS  &kp C_NEXT
&trans  &trans  &trans      &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans     &trans     &trans     &trans            &trans          &trans
                            &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans     &trans     &trans
            >;
        };
    };
};
